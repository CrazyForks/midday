name: Production Deployment

env:
  TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  TURBO_TEAM: ${{ secrets.VERCEL_ORG_ID }}
  NODE_OPTIONS: --max-old-space-size=8192

on:
  push:
    branches:
      - main
    paths:
      - apps/**
      - packages/**
      - "!packages/email/**"

jobs:
  # Global quality checks - run for all changed packages
  quality:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    outputs:
      has-api-changes: ${{ steps.changes.outputs.api }}
      has-dashboard-changes: ${{ steps.changes.outputs.dashboard }}
      has-website-changes: ${{ steps.changes.outputs.website }}
      has-engine-changes: ${{ steps.changes.outputs.engine }}
      has-email-changes: ${{ steps.changes.outputs.email }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api:
              - 'apps/api/**'
              - 'packages/**'
              - '!packages/email/**'
              - '!packages/ui/**'
            dashboard:
              - 'apps/dashboard/**'
              - 'packages/**'
            website:
              - 'apps/website/**'
              - 'packages/**'
              - '!packages/email/**'
            engine:
              - 'apps/engine/**'
            email:
              - 'packages/email/**'

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install

      - name: 🔦 Run linter
        run: bunx turbo lint --filter='[HEAD^1]'

      - name: 🪐 Check TypeScript
        run: bunx turbo typecheck --filter='[HEAD^1]'

      - name: 🧪 Run tests
        run: bunx turbo test --filter='[HEAD^1]'

  # Deploy Engine first (dependency for other apps)
  deploy-engine:
    name: 🚀 Deploy Engine
    runs-on: ubuntu-latest
    needs: quality
    if: needs.quality.outputs.has-engine-changes == 'true'
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install

      - name: 🏗 Build Engine
        run: bunx turbo build --filter=@midday/engine

      - name: 🚀 Deploy to Cloudflare
        uses: cloudflare/wrangler-action@v3
        with:
          packageManager: bun
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: "apps/engine"
          wranglerVersion: "3.93.0"
          command: deploy --minify src/index.ts --env production

  # Deploy API second (dependency for dashboard)
  deploy-api:
    name: 🚀 Deploy API
    runs-on: ubuntu-latest
    needs: [quality, deploy-engine]
    if: needs.quality.outputs.has-api-changes == 'true' && always()
    environment: production
    concurrency: fly-production
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install

      - name: 🏗 Build Engine (if needed)
        run: bunx turbo build --filter=@midday/engine

      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: 🚀 Deploy to Fly.io
        run: flyctl deploy --remote-only --dockerfile apps/api/Dockerfile --config apps/api/fly.toml
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  # Deploy Dashboard (depends on API)
  deploy-dashboard:
    name: 🚀 Deploy Dashboard
    runs-on: ubuntu-latest
    needs: [quality, deploy-api]
    if: needs.quality.outputs.has-dashboard-changes == 'true' && always()
    environment: production
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DASHBOARD }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install

      - name: 🏗 Build Engine
        run: bunx turbo build --filter=@midday/engine

      - name: 📤 Pull Vercel Environment
        run: bunx vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗 Build Dashboard
        run: bunx vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🔄 Deploy Background Jobs
        env:
          TRIGGER_ACCESS_TOKEN: ${{ secrets.TRIGGER_ACCESS_TOKEN }}
        run: |
          TRIGGER_PROJECT_ID=${{ secrets.TRIGGER_PROJECT_ID }} bunx trigger.dev@3.3.17 deploy
        working-directory: packages/jobs

      - name: 🚀 Deploy to Vercel
        run: |
          bunx vercel deploy --prebuilt --prod --archive=tgz --token=${{ secrets.VERCEL_TOKEN }} > domain.txt
          bunx vercel alias --scope=${{ secrets.VERCEL_ORG_ID }} --token=${{ secrets.VERCEL_TOKEN }} set `cat domain.txt` app.midday.ai

  # Deploy Website (parallel with dashboard)
  deploy-website:
    name: 🚀 Deploy Website
    runs-on: ubuntu-latest
    needs: quality
    if: needs.quality.outputs.has-website-changes == 'true'
    environment: production
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEBSITE }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install

      - name: 📤 Pull Vercel Environment
        run: bunx vercel env pull .env --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 📤 Pull Vercel Project Config
        run: bunx vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗 Build Website
        run: bunx vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Vercel
        run: |
          bunx vercel deploy --prebuilt --prod --archive=tgz --token=${{ secrets.VERCEL_TOKEN }} > domain.txt
          bunx vercel alias --scope=${{ secrets.VERCEL_ORG_ID }} --token=${{ secrets.VERCEL_TOKEN }} set `cat domain.txt` midday.ai

  # Deploy Email (parallel with other apps)
  deploy-email:
    name: 🚀 Deploy Email
    runs-on: ubuntu-latest
    needs: quality
    if: needs.quality.outputs.has-email-changes == 'true'
    environment: production
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_EMAIL }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install

      - name: 📤 Pull Vercel Environment
        run: bunx vercel env pull .env --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 📤 Pull Vercel Project Config
        run: bunx vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗 Build Email
        run: bunx vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Vercel
        run: |
          bunx vercel deploy --prebuilt --prod --archive=tgz --token=${{ secrets.VERCEL_TOKEN }} > domain.txt
          bunx vercel alias --scope=${{ secrets.VERCEL_ORG_ID }} --token=${{ secrets.VERCEL_TOKEN }} set `cat domain.txt` email.midday.ai

  # Summary job
  deployment-summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [quality, deploy-engine, deploy-api, deploy-dashboard, deploy-website, deploy-email]
    if: always()
    steps:
      - name: 📊 Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status | Changes Detected |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Engine | ${{ needs.deploy-engine.result || 'Skipped' }} | ${{ needs.quality.outputs.has-engine-changes }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API | ${{ needs.deploy-api.result || 'Skipped' }} | ${{ needs.quality.outputs.has-api-changes }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dashboard | ${{ needs.deploy-dashboard.result || 'Skipped' }} | ${{ needs.quality.outputs.has-dashboard-changes }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Website | ${{ needs.deploy-website.result || 'Skipped' }} | ${{ needs.quality.outputs.has-website-changes }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Email | ${{ needs.deploy-email.result || 'Skipped' }} | ${{ needs.quality.outputs.has-email-changes }} |" >> $GITHUB_STEP_SUMMARY 